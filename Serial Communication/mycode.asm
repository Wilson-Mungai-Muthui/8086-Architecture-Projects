;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Sun Dec 2019
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================
CODE    			SEGMENT PARA 'CODE'
					ASSUME CS:CODE, DS:DATA, SS:STAK
STAK    			SEGMENT PARA STACK 'STACK'
					DW 20 DUP(?)
STAK    			ENDS

DATA    			SEGMENT PARA 'DATA'
	SERIALDATA  	DB 15 DUP (?)
DATA    			ENDS

START PROC FAR
        MOV AX, DATA
		MOV DS, AX
		
		MOV DX, 104H
		
		; mod
		MOV AL, 0EEH
		OUT DX, AL ; garbage value
		
		; control
		MOV AL, 40H ; 0100 0000
		OUT DX, AL ; reset
		
		; mod
		MOV AL, 4DH ; 0100 1100
		OUT DX, AL 	
		
		; control
		MOV AL, 15H ; 0001 0101
		OUT DX, AL 	;control
		
		L1:	
		
		MOV AL, 'S'
		CALL CHECK_TxRDY			
		CALL SEND_CHARACTER
		
		MOV AL, 'R'
		CALL CHECK_TxRDY
		CALL SEND_CHARACTER
		
		CALL CHECK_RxRDY
		CALL RECEIVE_CHARACTER
		
		CMP AL, 'A'
		JNZ L1
		
		
		
		MOV CX, 5
		XOR SI, SI
		OUTER:		
			PUSH CX
			
			
			MOV AL, 'D'
			CALL CHECK_TxRDY
			CALL SEND_CHARACTER	

			
			CALL CHECK_RxRDY
			CALL RECEIVE_CHARACTER
			SUB AL, 30H ; ASCII to actual value
			XOR CX, CX
			MOV CL, AL
			
			INNER:
				CALL WAIT_A_LITTLE
				CALL RECEIVE_CHARACTER
				MOV SERIALDATA[SI], AL			
				INC SI
			LOOP INNER	
			
			POP CX
		LOOP OUTER
		
		CALL DELAY
		
		L2:		
		MOV AL, 'S'
		CALL CHECK_TxRDY
		CALL SEND_CHARACTER
		
		MOV AL, 'T'
		CALL CHECK_TxRDY
		CALL SEND_CHARACTER
		
		CALL CHECK_RxRDY
		CALL RECEIVE_CHARACTER
	
		CMP AL, 'P'
		JNZ L2
		
		ENDLESS:		
		NOP
        JMP ENDLESS
	
RETF
START ENDP


CHECK_TxRDY PROC NEAR
			PUSH AX
			PUSH DX
			
			MOV DX, 104H
			
			L1:
			IN AL, DX
			TEST AL, 01H
			JZ L1
			
			POP DX
			POP AX			
			RET
CHECK_TxRDY ENDP

CHECK_RxRDY PROC NEAR
			PUSH AX
			PUSH DX
			
			MOV DX, 104H
			
			L1:
			IN AL, DX
			TEST AL, 02H
			JZ L1
			
			POP DX
			POP AX			
			RET
CHECK_RxRDY ENDP

SEND_CHARACTER PROC NEAR
			   PUSH DX
			   
			   MOV DX, 100H
			   OUT DX, AL
			   	
			   POP DX
			   RET
SEND_CHARACTER ENDP

RECEIVE_CHARACTER PROC NEAR
			      PUSH DX
			      
			      MOV DX, 100H
			      IN AX, DX
				  SHR AL,1
			      CALL WAIT_A_LITTLE
					
			      POP DX
			      RET
RECEIVE_CHARACTER ENDP


WAIT_A_LITTLE PROC NEAR
			  PUSH CX
			  MOV CX, 0200H
			  LOOP1: 
			  NOP
			  LOOP LOOP1
		      POP CX
RET
WAIT_A_LITTLE ENDP
	
DELAY PROC NEAR
			  PUSH CX
			  MOV CX, 10
			  LOOP1:
				PUSH CX
				
					MOV CX, 0FFFFH
					LOOP2: 
					NOP
					LOOP LOOP2
				
				POP CX
			  LOOP LOOP1
		      POP CX
RET
DELAY ENDP
	

	
CODE    ENDS
        END START